from openai import OpenAI
from abc import ABC, abstractmethod
from LLM.LLM import LLM
import os
from dotenv import load_dotenv

class ChatGPT(LLM):
    def configure_api(self):
        """
        Configures the OpenAI API with the API key. This method is called in the constructor.
        """
        self.client = OpenAI(api_key=self.api_key)

    def get_response(self, prompt):
        """
        Calls the OpenAI API with the given prompt and returns the response.

        Args:
            prompt: The prompt for the LLM model.

        Returns:
            str: The response generated by the LLM model.
        """
        try:
            completion =  self.client.chat.completions.create(
                model="gpt-4o-mini",  # You may want to update the model if needed
                messages=[{"role": "user", "content": prompt}]
            )
            response =  completion.choices[0].message.content
            return response
        except Exception as e:
            return str(e)

# Example usage:
# load_dotenv()  # Load environment variables from a .env file
# llm = ChatGPT(os.environ["CHATGPT_API_KEY"])  # Ensure you have the correct API key in your .env
# response = llm.get_response("What is the capital of France?")
# print(response)
